buildscript {
	ext {
		lombokVersion = '1.18.30'
		springBootVersion = '3.2.0'
	}
}
plugins {
	id 'java'
	id 'pmd'
	id 'jacoco'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'org.jmresler.nibrs'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

def integrationTest = sourceSets.create('integration-test')

configurations[integrationTest.implementationConfigurationName].extendsFrom(configurations.testImplementation)
configurations[integrationTest.runtimeOnlyConfigurationName].extendsFrom(configurations.testRuntimeOnly)
configurations[integrationTest.annotationProcessorConfigurationName].extendsFrom(configurations.annotationProcessor)

def integrationTestTask = tasks.register('integrationTest', Test) {
	description = 'Runs integration tests.'
	group = 'verification'
	useJUnitPlatform()

	testClassesDirs = integrationTest.output.classesDirs
	classpath = configurations[integrationTest.runtimeClasspathConfigurationName] + integrationTest.output

	shouldRunAfter(tasks.named('test'))
}

tasks.named('check') {
	dependsOn(integrationTestTask)
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}
jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.5
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}

pmd {
	ignoreFailures = true
	consoleOutput = true
	toolVersion = "6.21.0"
	rulesMinimumPriority = 5
	ruleSets =
			["category/java/errorprone.xml",
			 "category/java/codestyle.xml",
			 "category/java/bestpractices.xml",
			 "category/java/design.xml",
			 "category/java/documentation.xml",
			 "category/java/multithreading.xml",
			 "category/java/performance.xml"]
}

clean {
	delete "logs"
	delete "data"

	delete "../logs"
	delete "../data"
}

dependencies {

	implementation project(':fbi-nibrs-dtos')
	implementation project(':fbi-nibrs-entities-mysql')

	// mapstruct
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	implementation 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

	// spring
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// lombok
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	integrationTestCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	integrationTestAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"


	developmentOnly "org.springframework.boot:spring-boot-devtools"

	runtimeOnly 'com.h2database:h2:2.2.224'
	runtimeOnly 'mysql:mysql-connector-java:8.0.33'
	runtimeOnly 'org.postgresql:postgresql:42.7.0'


	testImplementation 'org.assertj:assertj-core:3.21.0'
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.springframework.batch:spring-batch-test"

	integrationTestImplementation 'org.assertj:assertj-core:3.21.0'
	integrationTestImplementation "org.springframework.boot:spring-boot-starter-test"
	integrationTestImplementation "org.springframework.batch:spring-batch-test"
}

